[{"title": "Stacks", "content": ["- **Stacks** are a fundamental data structure in computer science.", "They follow the **Last-In-First-Out (LIFO)** principle.", "Think of a stack of plates: you add and remove plates from the top."], "image_desc": "A stack of plates with the top plate being removed", "narration": "Stacks ek aise data structure hain jo computer science mein bahut important hain. Yeh LIFO principle par kaam karte hain. Iska matlab hai ki jo element sabse aakhir mein daala gaya tha, woh sabse pehle nikalega. Jaise ek plate ka stack hota hai, aap usme plates top se add aur remove karte hain.", "slide_number": "1", "image_url": "https://www.sqlshack.com/wp-content/uploads/2020/07/stack-of-plates-gray.jpeg", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_1.webp"}, {"title": "Stack Implementation", "content": ["- Stacks can be implemented in two ways:\n    - **Static Implementation:** Using arrays.\n    - **Dynamic Implementation:** Using linked lists."], "image_desc": "Two diagrams, one showing a stack implemented using an array, the other showing a stack implemented using a linked list", "narration": "Stacks ko do tarike se implement kiya ja sakta hai: Static implementation aur Dynamic implementation. Static implementation mein hum arrays ka use karte hain, aur Dynamic implementation mein hum linked lists ka use karte hain.", "slide_number": "2", "image_url": "https://www.simplilearn.com/ice9/free_resources_article_thumb/Soni-Stack-Article/stack-implementation-using-array.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_2.webp"}, {"title": "Static Implementation", "content": ["- **Definition:** Uses a fixed-size array to store elements.", "**Limitations:** The size must be defined beforehand.", "**Operations:**\n    - **Push:** Adds an element to the top.\n    - **Pop:** Removes the top element."], "image_desc": "A diagram showing a stack implemented using an array, with arrows indicating the push and pop operations", "narration": "Static implementation mein hum ek fixed-size array ka use karte hain. Iska matlab hai ki hum pehle se hi array ka size define kar dete hain. Isme ek limitation hai ki hum array ka size badha nahi sakte. Static implementation mein hum push aur pop operations perform karte hain. Push operation mein hum ek element top par add karte hain, aur pop operation mein hum top element ko remove karte hain.", "slide_number": "3", "image_url": "https://www.simplilearn.com/ice9/free_resources_article_thumb/Soni-Stack-Article/stack-implementation-using-array.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_3.webp"}, {"title": "Static Implementation - Algorithms", "content": ["- **Push Algorithm:**\n    - Checks if the stack is full.\n    - If not full, adds the element to the top.", "**Pop Algorithm:**\n    - Checks if the stack is empty.\n    - If not empty, removes the top element."], "image_desc": "Code snippets for the push and pop algorithms in static implementation", "narration": "Static implementation mein push aur pop operations ke liye algorithms hain. Push algorithm mein pehle check kiya jata hai ki stack full hai ya nahi. Agar full nahi hai, toh element top par add kiya jata hai. Pop algorithm mein pehle check kiya jata hai ki stack empty hai ya nahi. Agar empty nahi hai, toh top element remove kiya jata hai.", "slide_number": "4", "image_url": "https://app.codiga.io/_next/static/media/create-smart-code-snippets.5ac070a3.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_4.webp"}, {"title": "Dynamic Implementation", "content": ["- **Definition:** Uses a linked list to store elements.", "**Flexibility:** The size can grow dynamically.", "**Operations:**\n    - **Push:** Adds a new node to the top.\n    - **Pop:** Removes the top node."], "image_desc": "A diagram showing a stack implemented using a linked list, with arrows indicating the push and pop operations", "narration": "Dynamic implementation mein hum linked list ka use karte hain. Isme hum pehle se array ka size define nahi karte, aur stack ka size dynamically badha sakte hain. Dynamic implementation mein bhi push aur pop operations perform karte hain. Push operation mein hum ek new node top par add karte hain, aur pop operation mein hum top node ko remove karte hain.", "slide_number": "5", "image_url": "https://static.javatpoint.com/ds/images/ds-linked-list-implementation-stack2.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_5.webp"}, {"title": "Dynamic Implementation - Algorithms", "content": ["- **Push Algorithm:**\n    - Creates a new node.\n    - Adds the new node to the top.", "**Pop Algorithm:**\n    - Checks if the stack is empty.\n    - If not empty, removes the top node and deallocates memory."], "image_desc": "Code snippets for the push and pop algorithms in dynamic implementation", "narration": "Dynamic implementation mein bhi push aur pop operations ke liye algorithms hain. Push algorithm mein pehle ek new node create kiya jata hai. Fir is new node ko top par add kiya jata hai. Pop algorithm mein pehle check kiya jata hai ki stack empty hai ya nahi. Agar empty nahi hai, toh top node remove kiya jata hai aur uski memory deallocate ki jati hai.", "slide_number": "6", "image_url": "https://i.ytimg.com/vi/ARbtD-dTQhY/hqdefault.jpg", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_6.webp"}, {"title": "Polish Notations", "content": ["- **Prefix Notation:** Operator before operands (e.g., + A B)", "**Postfix Notation:** Operator after operands (e.g., A B +)", "**Infix Notation:** Operator between operands (e.g., A + B)"], "image_desc": "A table showing examples of prefix, postfix, and infix notations", "narration": "Polish notations ek tarika hai expressions ko represent karne ka. Teen types ke polish notations hain: Prefix notation, Postfix notation, aur Infix notation. Prefix notation mein operator operands ke pehle aata hai. Postfix notation mein operator operands ke baad aata hai. Infix notation mein operator operands ke beech mein aata hai.", "slide_number": "7", "image_url": "https://prepinsta.com/wp-content/uploads/2020/06/Postfix-Prefix-and-Infix.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_7.webp"}, {"title": "Conversion Examples", "content": ["- **Infix to Postfix Conversion:**\n    - For A + B * C, the postfix expression is A B C * +."], "image_desc": "A step-by-step example of converting an infix expression to postfix notation", "narration": "Hum infix expression ko postfix notation mein convert kar sakte hain. Jaise A + B * C ko convert karne par A B C * + postfix expression milega.", "slide_number": "8", "image_url": "https://media.geeksforgeeks.org/wp-content/uploads/20230307170146/post6drawio.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_8.webp"}, {"title": "Infix to Postfix Conversion Algorithm", "content": ["- **Algorithm:**\n    1. Push ( onto the stack.\n    2. Add ) to the end of the expression.\n    3. Scan the expression from left to right.\n    4. If an operand is encountered, add it to the postfix expression.\n    5. If a left parenthesis is encountered, push it onto the stack.\n    6. If an operator is encountered, pop operators from the stack to the postfix expression based on precedence.\n    7. If a right parenthesis is encountered, pop until a left parenthesis is found."], "image_desc": "A flowchart illustrating the algorithm for infix to postfix conversion", "narration": "Infix to postfix conversion ke liye ek algorithm hai. Is algorithm mein pehle ( ko stack mein push kiya jata hai. Fir expression ke end mein ) add kiya jata hai. Fir expression ko left se right scan kiya jata hai. Agar operand milta hai, toh use postfix expression mein add kiya jata hai. Agar left parenthesis milta hai, toh use stack mein push kiya jata hai. Agar operator milta hai, toh stack se operators ko postfix expression mein precedence ke hisab se pop kiya jata hai. Agar right parenthesis milta hai, toh stack se operators ko pop kiya jata hai jab tak ki left parenthesis nahi mil jaata.", "slide_number": "9", "image_url": "https://i.ytimg.com/vi/jb25Z8HTbgA/maxresdefault.jpg", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_9.webp"}, {"title": "Conclusion", "content": ["- Stacks are a versatile data structure used in various applications.", "Understanding their implementation and operations is crucial for effective programming.", "Conversion techniques for notations like postfix are essential for expression evaluation."], "image_desc": "A diagram showing various applications of stacks, such as function calls, undo/redo operations, and expression evaluation", "narration": "Stacks bahut versatile data structure hain aur inka use bahut saare applications mein hota hai. Stacks ki implementation aur operations ko samajhna effective programming ke liye bahut important hai. Postfix jaise notations ke liye conversion techniques expression evaluation ke liye bahut jaruri hain.", "slide_number": "10", "image_url": "https://learnloner.com/wp-content/uploads/2023/05/Stack-Data-Structure.png", "image_path": "data/videos/c6cc44c0-e34c-497a-8729-f3b30f0872ab/images/image_10.webp"}]