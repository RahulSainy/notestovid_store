[{"title": "Arrays in DSA", "content": ["- An **array** is a collection of variables of the same type that are referenced by a common name.", "Arrays allow you to group multiple items into a single unit, with all elements stored in contiguous memory locations.", "The first element is accessed with index 0, and subsequent elements follow sequentially."], "image_desc": "A visual representation of an array, showing its elements and their indices.", "narration": "Aapne array ke baare mein suna hoga, yeh ek data structure hai jismein ek jaise type ke variables ko ek saath rakha jaata hai. Har variable ko ek unique index se identify kiya jaata hai, aur yeh contiguous memory locations mein store hote hain.", "slide_number": "1", "image_url": "https://avantutor.com/blog/wp-content/uploads/2019/03/cspr_0601.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_1.webp"}, {"title": "Types of Arrays", "content": ["- **Single-Dimensional Arrays**: A linear list of homogenous elements.", "**Multi-Dimensional Arrays**: Arrays where each element is itself an array. The most common form is the two-dimensional array, but C supports arrays with more than two dimensions."], "image_desc": "A diagram showing a single-dimensional array and a two-dimensional array.", "narration": "Arrays do types ke hote hain: Single-Dimensional Arrays aur Multi-Dimensional Arrays. Single-Dimensional Arrays ek simple list hote hain, jaise ek number ka sequence. Multi-Dimensional Arrays mein, har element khud ek array hota hai, jaise matrix ya table.", "slide_number": "2", "image_url": "https://journaldev.nyc3.digitaloceanspaces.com/2020/03/2-DArrays.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_2.webp"}, {"title": "Single-Dimensional Arrays: Declaration", "content": ["- The syntax for declaring a single-dimensional array is:\n'''c\ndata_type array_name[size];\n'''", "'data_type': Type of elements (e.g., 'int', 'float').", "'array_name': Name of the array.", "'size': Number of elements."], "image_desc": "A code snippet showing the declaration of a single-dimensional array.", "narration": "Single-Dimensional Arrays ko declare karne ke liye, aap 'data_type', 'array_name', aur 'size' use karte hain. Jaise, 'int marks 10;' yeh ek 'marks' naam ka array declare karta hai jismein 10 'int' type ke elements hain.", "slide_number": "3", "image_url": "https://www.scientecheasy.com/wp-content/uploads/2021/08/java-one-dimensional-array.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_3.webp"}, {"title": "Single-Dimensional Arrays: Initialization", "content": ["- You can initialize an array upon declaration:\n'''c\ndata_type array_name[size] = {element1, element2, ..., elementN};\n'''", "Or without specifying the size:\n'''c\ndata_type array_name[] = {element1, element2, ..., elementN};\n'''"], "image_desc": "A code snippet showing the initialization of a single-dimensional array.", "narration": "Aap array ko declare karte samay hi initialize bhi kar sakte hain. Jaise, 'int marks[] = {50, 25, 72, 45, 30};' yeh 'marks' array ko 5 elements se initialize karta hai.", "slide_number": "4", "image_url": "/data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_4.webp", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_4.webp"}, {"title": "Single-Dimensional Arrays: Accessing Elements", "content": ["- Elements in an array can be accessed using their index:\n'''c\narray_name[index];\n'''"], "image_desc": "A code snippet showing how to access an element in a single-dimensional array.", "narration": "Array ke elements ko access karne ke liye, aap 'array_name' aur 'index' use karte hain. Jaise, 'marks[1]' yeh 'marks' array ka dusra element access karega.", "slide_number": "5", "image_url": "https://www.scientecheasy.com/wp-content/uploads/2021/08/java-one-dimensional-array.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_5.webp"}, {"title": "Single-Dimensional Arrays: Reading and Writing Arrays", "content": ["- You can use loops to read and write array elements:\n'''c\nfor (int i = 0; i < 5; i++) {\n    scanf(\"%d\", &marks[i]);  // Reading elements\n}\nfor (int i = 0; i < 5; i++) {\n    printf(\"%d\\t\", marks[i]); // Writing (printing) elements\n}\n'''"], "image_desc": "A code snippet showing how to read and write elements in a single-dimensional array using loops.", "narration": "'Loops' ka use karke aap array ke elements ko read aur write kar sakte hain. Jaise, 'for' loop ka use karke aap user se input le sakte hain aur array mein store kar sakte hain, aur fir usse print bhi kar sakte hain.", "slide_number": "6", "image_url": "https://codescracker.com/cpp/images/cpp-one-dimensional-array-example-program.JPG", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_6.webp"}, {"title": "Single-Dimensional Arrays: Memory Representation", "content": ["- The address of an element in a one-dimensional array can be calculated as:\n'''\nAddress of a[k] = B + W * k\n'''\nWhere:", "'B': Base address of the array", "'W': Size of each element", "'k': Index of the element"], "image_desc": "A diagram showing the memory representation of a single-dimensional array.", "narration": "**Memory** mein, array ke elements ek saath store hote hain. Kisi element ka address calculate karne ke liye, aap 'base address', 'size of element', aur 'index' use karte hain.", "slide_number": "7", "image_url": "https://www.scientecheasy.com/wp-content/uploads/2021/08/java-one-dimensional-array.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_7.webp"}, {"title": "Programs for Single-Dimensional Arrays: Program 1: Array Initialization", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int marks[] = {50, 60, 70, 80, 90};\n    for (int i = 0; i < 5; i++)\n        printf(\"%d\\t\", marks[i]);\n}\n'''"], "image_desc": "A code snippet showing a program that initializes a single-dimensional array and prints its elements.", "narration": "Yeh program ek 'marks' array ko initialize karta hai aur uske elements ko print karta hai.", "slide_number": "8", "image_url": "http://www.codescracker.com/cpp/images/cpp-one-dimensional-array-example-program.JPG", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_8.webp"}, {"title": "Programs for Single-Dimensional Arrays: Program 2: Array Input from User", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int marks[5];\n    for (int i = 0; i < 5; i++)\n        scanf(\"%d\", &marks[i]);\n    for (int i = 0; i < 5; i++)\n        printf(\"%d\\t\", marks[i]);\n}\n'''"], "image_desc": "A code snippet showing a program that takes input from the user and stores it in a single-dimensional array.", "narration": "Yeh program user se input leke 'marks' array mein store karta hai aur fir usse print karta hai.", "slide_number": "9", "image_url": "https://codescracker.com/cpp/images/cpp-one-dimensional-array-example-program.JPG", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_9.webp"}, {"title": "Programs for Single-Dimensional Arrays: Program 3: Sum and Average", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int A[5];\n    float sum = 0, avg;\n    for (int i = 0; i < 5; i++)\n        scanf(\"%d\", &A[i]);\n    for (int i = 0; i < 5; i++)\n        sum += A[i];\n    avg = sum / 5;\n    printf(\"Sum: %.2f\\nAverage: %.2f\\n\", sum, avg);\n}\n'''"], "image_desc": "A code snippet showing a program that calculates the sum and average of elements in a single-dimensional array.", "narration": "Yeh program user se input leke 'A' array mein store karta hai aur fir uske elements ka sum aur average calculate karta hai.", "slide_number": "10", "image_url": "https://i.ytimg.com/vi/OmYgfEs_eh0/maxresdefault.jpg", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_10.webp"}, {"title": "Programs for Single-Dimensional Arrays: Program 4: Largest and Smallest Element", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int A[5], max, min;\n    for (int i = 0; i < 5; i++)\n        scanf(\"%d\", &A[i]);\n    max = min = A[0];\n    for (int i = 0; i < 5; i++) {\n        if (max < A[i]) max = A[i];\n        if (min > A[i]) min = A[i];\n    }\n    printf(\"Largest: %d\\nSmallest: %d\\n\", max, min);\n}\n'''"], "image_desc": "A code snippet showing a program that finds the largest and smallest elements in a single-dimensional array.", "narration": "Yeh program user se input leke 'A' array mein store karta hai aur fir uske elements mein se sabse bada aur sabse chhota element find karta hai.", "slide_number": "11", "image_url": "https://www.codevscolor.com/static/11ad0c4920d6e7ddfcba4bb9a63eae41/24664/c-plus-plus-smallest-largest-elements-array.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_11.webp"}, {"title": "Programs for Single-Dimensional Arrays: Program 5: Insert an Element", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int A[10], len, num, pos;\n    scanf(\"%d\", &len);\n    for (int i = 0; i < len; i++)\n        scanf(\"%d\", &A[i]);\n    scanf(\"%d %d\", &num, &pos);\n    for (int i = len; i > pos; i--)\n        A[i] = A[i-1];\n    A[pos] = num;\n    len++;\n    for (int i = 0; i < len; i++)\n        printf(\"%d\\t\", A[i]);\n}\n'''"], "image_desc": "A code snippet showing a program that inserts an element at a specific position in a single-dimensional array.", "narration": "Yeh program user se input leke 'A' array mein store karta hai aur fir usme ek new element ko specific position pe insert karta hai.", "slide_number": "12", "image_url": "https://d33wubrfki0l68.cloudfront.net/fde8c63f280299e68c3b526e36ffe986206b90d9/90bb8/static/72213dac6f1cbbac8361931ad72139b7/d9199/c-insert-element-array.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_12.webp"}, {"title": "Programs for Single-Dimensional Arrays: Program 6: Delete an Element", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int A[10], len, num;\n    scanf(\"%d\", &len);\n    for (int i = 0; i < len; i++)\n        scanf(\"%d\", &A[i]);\n    scanf(\"%d\", &num);\n    for (int i = 0; i < len; i++) {\n        if (A[i] == num) {\n            for (int j = i; j < len-1; j++)\n                A[j] = A[j+1];\n            len--;\n            break;\n        }\n    }\n    for (int i = 0; i < len; i++)\n        printf(\"%d\\t\", A[i]);\n}\n'''"], "image_desc": "A code snippet showing a program that deletes an element from a single-dimensional array.", "narration": "Yeh program user se input leke 'A' array mein store karta hai aur fir usme se ek specific element ko delete karta hai.", "slide_number": "13", "image_url": "https://www.programmingsimplified.com/images/c/delete-array-c.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_13.webp"}, {"title": "Double-Dimensional Arrays: Declaration", "content": ["- The syntax for declaring a two-dimensional array is:\n'''c\ndata_type array_name[rows][columns];\n'''"], "image_desc": "A code snippet showing the declaration of a two-dimensional array.", "narration": "Two-Dimensional Arrays ko declare karne ke liye, aap data_type, array_name, rows, aur columns use karte hain. Jaise, int A 4, 3  yeh ek A naam ka 2D array declare karta hai jismein 4 rows aur 3 columns hain.", "slide_number": "14", "image_url": "https://i.ytimg.com/vi/xTZNpAOiNn8/maxresdefault.jpg", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_14.webp"}, {"title": "Double-Dimensional Arrays: Initialization", "content": ["- You can initialize a two-dimensional array like this:\n'''c\ndata_type array_name[rows][columns] = {{row1}, {row2}, ...};\n'''"], "image_desc": "A code snippet showing the initialization of a two-dimensional array.", "narration": "Aap 2D array ko declare karte samay hi initialize bhi kar sakte hain. Jaise, 'int A 4 3  =   1, 2, 3 ,  4, 5, 6 ,  7, 8, 9 ,  10, 11, 12  ;' yeh 'A' array ko 4 rows aur 3 columns ke elements se initialize karta hai.", "slide_number": "15", "image_url": "https://img.brainkart.com/imagebk37/2iCL5pT.jpg", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_15.webp"}, {"title": "Double-Dimensional Arrays: Accessing Elements", "content": ["- Access elements using:\n'''c\narray_name[row][column];\n'''"], "image_desc": "A code snippet showing how to access an element in a two-dimensional array.", "narration": "2D array ke elements ko access karne ke liye, aap 'array_name', 'row', aur 'column' use karte hain. Jaise, 'A[1][2]' yeh 'A' array ki dusri row ke teesre column ka element access karega.", "slide_number": "16", "image_url": "https://www.simplilearn.com/ice9/free_resources_article_thumb/printing-two-dimensional-array.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_16.webp"}, {"title": "Double-Dimensional Arrays: Memory Representation", "content": ["- Elements can be stored in memory using:\n1. **Row-Major Order**: Storing all elements of a row before moving to the next row.\n2. **Column-Major Order**: Storing all elements of a column before moving to the next column."], "image_desc": "A diagram showing the memory representation of a two-dimensional array in row-major and column-major order.", "narration": "**Memory** mein, 2D array ke elements ko **Row-Major Order** ya **Column-Major Order** mein store kiya jaata hai. **Row-Major Order** mein, ek row ke sabhi elements ko pehle store kiya jaata hai, fir dusri row ke elements ko. **Column-Major Order** mein, ek column ke sabhi elements ko pehle store kiya jaata hai, fir dusre column ke elements ko.", "slide_number": "17", "image_url": "https://journaldev.nyc3.digitaloceanspaces.com/2020/03/2-DArrays.png", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_17.webp"}, {"title": "Example Program: Matrix Input and Output", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int A[4][3];\n    for (int r = 0; r < 4; r++)\n        for (int c = 0; c < 3; c++)\n            scanf(\"%d\", &A[r][c]);\n    for (int r = 0; r < 4; r++) {\n        for (int c = 0; c < 3; c++)\n            printf(\"%d\\t\", A[r][c]);\n        printf(\"\\n\");\n    }\n}\n'''"], "image_desc": "A code snippet showing a program that takes input from the user and stores it in a two-dimensional array, and then prints the array.", "narration": "Yeh program user se input leke 'A' array mein store karta hai aur fir usse print karta hai.", "slide_number": "18", "image_url": "http://codescracker.com/cpp/program/images/cpp-program-2d-array.JPG", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_18.webp"}, {"title": "Example Program: Matrix Addition", "content": ["'''c\n#include<stdio.h>\n\nvoid main() {\n    int A[3][3], B[3][3], C[3][3];\n    for (int r = 0; r < 3; r++)\n        for (int c = 0; c < 3; c++)\n            scanf(\"%d\", &A[r][c]);\n    for (int r = 0; r < 3; r++)\n        for (int c = 0; c < 3; c++)\n            scanf(\"%d\", &B[r][c]);\n    for (int r = 0; r < 3; r++)\n        for (int c = 0; c < 3; c++)\n            C[r][c] = A[r][c] + B[r][c];\n    for (int r = 0; r < 3; r++) {\n        for (int c = 0; c < 3; c++)\n            printf(\"%d\\t\", C[r][c]);\n        printf(\"\\n\");\n    }\n}\n'''"], "image_desc": "A code snippet showing a program that adds two matrices stored in two-dimensional arrays.", "narration": "Yeh program user se input leke 'A' aur 'B' arrays mein store karta hai aur fir unka sum calculate karke 'C' array mein store karta hai.", "slide_number": "19", "image_url": "https://i.ytimg.com/vi/P36A3vYy_KM/maxresdefault.jpg", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_19.webp"}, {"title": "Conclusion", "content": ["- Arrays are powerful tools in C for managing collections of data, enabling efficient storage and manipulation.", "By understanding single and multi-dimensional arrays, you can handle various data processing tasks effectively."], "image_desc": "A diagram showing the various applications of arrays in data processing.", "narration": "**Arrays** C programming mein bahut useful hote hain, aap inka use karke data ko store aur manipulate kar sakte hain. **Single-Dimensional Arrays** aur **Multi-Dimensional Arrays** ko samajhne se, aap different data processing tasks ko efficiently handle kar sakte hain.", "slide_number": "20", "image_url": "http://planningtank.com/wp-content/uploads/2014/01/Distribution-Process.jpg", "image_path": "data/videos/15e30c1b-3b5a-452d-a404-c9ae426b7582/images/image_20.webp"}]