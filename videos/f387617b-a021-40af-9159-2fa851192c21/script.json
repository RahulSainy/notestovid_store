[{"title": "Introduction to Linked Lists", "content": ["- **Linked lists** are a dynamic data structure, unlike arrays, which have a fixed size.", "They are composed of individual elements called **nodes**.", "Each node contains data and a pointer to the next node in the sequence.", "This chaining mechanism allows linked lists to grow and shrink dynamically."], "image_desc": "A visual representation of a linked list with nodes containing data and pointers to the next node.", "narration": "Aap sabhi ka is series mein swagat hai, jahan hum algorithms ke analysis aur design ke bare mein jaan rahe hain. Aaj hum linked lists ke baare mein jaanenge. Linked lists ek dynamic data structure hai, jiske size ko runtime mein badhaya ya ghataya ja sakta hai. Ye nodes se banta hai, jismein data aur next node ka pointer hota hai. Iske karan, linked lists ko dynamic tarike se badhaya aur ghataya ja sakta hai.", "slide_number": "1", "image_url": "https://miro.medium.com/max/1400/1*i1SgZnkB-_mrec4MvRJn4Q.png", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_1.webp"}, {"title": "Memory Allocation in C", "content": ["- **Memory allocation** is the process of reserving memory for variables.", "There are two primary methods: **static allocation** and **dynamic allocation**.", "**Static allocation** reserves memory at compile time.", "**Dynamic allocation** allows you to request memory at runtime using pointers."], "image_desc": "A diagram illustrating static and dynamic memory allocation.", "narration": "Memory allocation ka matlab hai ki variables ke liye memory reserve karna. Iske do tareeke hain: static allocation aur dynamic allocation. Static allocation mein, compiler compile time mein variables ke liye memory reserve karta hai. Dynamic allocation mein, aap runtime mein pointer ka use karke memory request kar sakte hain.", "slide_number": "2", "image_url": "https://static.javatpoint.com/difference/images/difference-between-static-and-dynamic-memory-allocation.png", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_2.webp"}, {"title": "Static Allocation", "content": ["- In **static allocation**, the compiler determines memory requirements based on data types.", "For example, an integer array of five elements will allocate a fixed block of 20 bytes.", "This approach can be inefficient if the number of elements is unknown beforehand."], "image_desc": "A code snippet demonstrating static allocation of an integer array.", "narration": "Static allocation mein, compiler data types ke base par memory requirements decide karta hai. Jaise ki, panch elements ka integer array 20 bytes ka fixed block allocate karega. Agar aapko pehle se elements ki exact number nahi pata hai, to yeh approach inefficient ho sakta hai.", "slide_number": "3", "image_url": "https://2.bp.blogspot.com/-mGdy3VNceCg/WJip3n6Pq0I/AAAAAAAAB-s/lONQR5F7QfgwuWOv5z_vkqwxBnTtMSyCgCLcB/s1600/ARRAY_Fotor.jpg", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_3.webp"}, {"title": "Dynamic Allocation", "content": ["- **Dynamic allocation** provides flexibility by allowing memory requests at runtime.", "The **malloc()** function requests a block of memory, specifying the size in bytes.", "It returns a pointer to the allocated memory block.", "The **free()** function releases allocated memory back to the system."], "image_desc": "A code snippet demonstrating dynamic allocation using malloc() and free().", "narration": "Dynamic allocation aapko runtime mein memory request karne ki flexibility deta hai. Malloc() function memory ka block request karta hai, size bytes mein. Ye allocate kiye gaye memory block ka pointer return karta hai. Free() function allocate kiye gaye memory ko system mein release karta hai.", "slide_number": "4", "image_url": "https://i.ytimg.com/vi/Yz2i96-c6CU/maxresdefault.jpg", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_4.webp"}, {"title": "Linked List Operations", "content": ["- **Creation:** Initializing an empty linked list.", "**Insertion:** Adding new nodes at various positions: beginning, end, or a specific location.", "**Deletion:** Removing nodes based on their position.", "**Traversal:** Iterating through the nodes in sequence.", "**Searching:** Finding a specific node based on its data.", "**Concatenation:** Joining two linked lists.", "**Display:** Printing the data contained in each node."], "image_desc": "A flowchart illustrating the various operations performed on a linked list.", "narration": "Ab hum linked list ke fundamental operations ke baare mein jaanenge. Creation mein, hum ek empty linked list initialize karte hain. Insertion mein, hum new nodes ko different positions mein add karte hain: beginning, end, ya specific location. Deletion mein, hum nodes ko unki position ke base par remove karte hain. Traversal mein, hum nodes ko sequence mein iterate karte hain. Searching mein, hum specific node ko uske data ke base par find karte hain. Concatenation mein, hum do linked lists ko join karte hain. Display mein, hum har node mein contained data ko print karte hain.", "slide_number": "5", "image_url": "https://www.conceptdraw.com/How-To-Guide/picture/flowchart-types/flowchart-types.gif", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_5.webp"}, {"title": "Types of Linked Lists", "content": ["- **Singly Linked List:** Nodes have a pointer to the next node.", "**Doubly Linked List:** Nodes have pointers to both the next and previous nodes.", "**Circular Linked List:** The last node's pointer points back to the first node.", "**Circular Doubly Linked List:** A combination of circular and doubly linked lists."], "image_desc": "Visual representations of different types of linked lists: singly, doubly, circular, and circular doubly linked lists.", "narration": "Linked lists alag alag types mein aate hain. Singly linked list mein, nodes mein next node ka pointer hota hai. Doubly linked list mein, nodes mein next aur previous dono nodes ka pointer hota hai. Circular linked list mein, last node ka pointer pehle node ko point karta hai. Circular doubly linked list mein, circular aur doubly linked list dono features hote hain.", "slide_number": "6", "image_url": "https://cdn.educba.com/academy/wp-content/uploads/2020/03/Circular-Linked-List-in-Data-Structure-m2-.jpg", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_6.webp"}, {"title": "Implementation Considerations", "content": ["- Handle edge cases like empty lists or lists with only one node.", "Consider performance implications of different operations, especially time complexity."], "image_desc": "A code snippet illustrating the handling of edge cases in linked list implementation.", "narration": "Linked lists implement karte waqt, humko edge cases ko handle karna chahiye, jaise ki empty lists ya lists mein sirf ek node hona. Iske alawa, humko different operations ke performance implications ko bhi consider karna chahiye, khaas karke time complexity ko.", "slide_number": "7", "image_url": "https://1.bp.blogspot.com/-z0fdoZU-IZw/YOqYl2jiC9I/AAAAAAAAZW4/pMyYSfGOWTcGjkoHmLZnLsUZMYUK97NuQCLcBGAsYHQ/s1116/singly_linked_list-min.png", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_7.webp"}, {"title": "Conclusion", "content": ["- Linked lists are a versatile data structure with dynamic memory management.", "They offer flexibility in data storage and manipulation.", "Understanding linked lists is crucial for efficient algorithm design and implementation."], "image_desc": "A graphic representation of a linked list with various operations highlighted.", "narration": "Linked lists ek versatile data structure hai, jismein dynamic memory management hota hai. Ye data storage aur manipulation mein flexibility deta hai. Linked lists ko samajhna efficient algorithm design aur implementation ke liye bahut zaruri hai.", "slide_number": "8", "image_url": "https://afteracademy.com/images/types-of-linked-list-and-operation-on-linked-list-insert-begin-c5d6d8aebb19c584.png", "image_path": "data/videos/f387617b-a021-40af-9159-2fa851192c21/images/image_8.webp"}]