[{"slide_number": "1", "title": "IT403: Analysis & Design of Algorithms - Unit 1: Introduction", "slide_type": "Two Columns", "content": "(No additional content for Title Slide)", "image_desc": "A stylized graphic depicting a flowchart or algorithm diagram. Type: illustration\n\n### Video Suggestion:\nA stock footage video showing abstract data flowing and processing.", "video_desc": "A stock footage video showing abstract data flowing and processing.", "narration": "Welcome to IT403 Analysis and Design of Algorithms.  In this unit we'll cover the fundamentals of algorithms starting with an introduction to what algorithms are and how they're designed.", "image_url": "/data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_1.webp", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_1.webp", "video_url": "https://example.com/image_1.png", "video_path": "data/videos/image_1.webp"}, {"slide_number": "2", "title": "What is an Algorithm?", "slide_type": "Image Left", "content": "A set of rules for calculations (manual or machine).\nA well-defined computational procedure with input and output.\nA finite sequence of instructions to achieve a specific output.\nA finite set of instructions to accomplish a particular task.", "image_desc": "An image of a flowchart showing a simple algorithm, such as adding two numbers. Type: diagram\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "An algorithm is essentially a stepbystep procedure for solving a problem. It takes input performs a series of operations and produces a desired output.  The key is that it's finite  it always terminates after a specific number of steps.", "image_url": "https://i.ytimg.com/vi/nHjiHYSzDIo/hqdefault.jpg", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_2.webp", "video_url": "https://example.com/image_2.png", "video_path": "data/videos/image_2.webp"}, {"slide_number": "3", "title": "Algorithm Criteria", "slide_type": "Two Columns", "content": "**Column 1: Essential Criteria**\nInput: Zero or more quantities are externally supplied.\nOutput: At least one quantity is produced.\nDefiniteness: Each instruction is clear and unambiguous.\nFiniteness: The algorithm terminates after a finite number of steps.\n**Column 2: Additional Criteria**\nEffectiveness: Each instruction is feasible and can be carried out in principle.", "image_desc": "A checklist graphic with checkmarks next to each of the algorithm criteria. Type: illustration\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "For an algorithm to be valid it must meet several criteria.  It needs input produces output and each step must be clearly defined. Crucially it must finish in a finite amount of time and every step must be practically achievable.", "image_url": "https://cdn3.vectorstock.com/i/1000x1000/05/62/checklist-with-tick-marks-in-a-flat-style-vector-22550562.jpg", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_3.webp", "video_url": "https://example.com/image_3.png", "video_path": "data/videos/image_3.webp"}, {"slide_number": "4", "title": "Designing Algorithms", "slide_type": "Image Right", "content": "Understanding the problem\nAscertaining computational device capabilities\nExact/approximate solution\nChoosing appropriate data structures\nAlgorithm design techniques\nSpecifying the algorithm\nProving correctness\nAnalyzing the algorithm", "image_desc": "A graphic depicting a problem-solving process, perhaps a puzzle being solved step-by-step. Type: illustration\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "Designing an algorithm involves several stages.  First you need a thorough understanding of the problem. Then consider the limitations of your computing resources.  Decide whether you need an exact or approximate solution select suitable data structures and choose appropriate design techniques.  Finally you'll need to formally specify the algorithm prove its correctness and analyze its efficiency.", "image_url": "https://img.freepik.com/premium-vector/illustration-woman-solving-puzzle-depicting-concept-problem-solving_778176-760.jpg?w=826", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_4.webp", "video_url": "https://example.com/image_4.png", "video_path": "data/videos/image_4.webp"}, {"slide_number": "5", "title": "Algorithm Analysis", "slide_type": "Image with Caption", "content": "(No content, caption on the image)", "image_desc": "A graph showing time complexity (y-axis) versus input size (x-axis) for different algorithm types (e.g., O(n), O(n log n), O(n^2)). Type: chart\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "Algorithm analysis is crucial for determining an algorithm's efficiency. We'll look at space and time complexity considering bestcase worstcase and averagecase scenarios.  This graph illustrates how different algorithms scale with increasing input size.", "image_url": "https://paper-attachments.dropbox.com/s_2D428973624E7FC84C7D69D11421DE762BEA6B6F3361231FCDCAE0425D14526F_1664885448372_Untitled.drawio+17.png", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_5.webp", "video_url": "https://example.com/image_5.png", "video_path": "data/videos/image_5.webp"}, {"slide_number": "6", "title": "Asymptotic Notations", "slide_type": "Two Columns", "content": "**Column 1: Big O Notation (\u039f)**\nUpper bound of an algorithm's running time (worst-case).\n**Column 2: Omega Notation (\u03a9)**\nLower bound of an algorithm's running time (best-case).", "image_desc": "A visual representation of Big O and Omega notations, perhaps using graphs or mathematical symbols. Type: illustration\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "We use asymptotic notations like Big O Omega and Theta to describe the growth rate of an algorithm's time or space complexity as the input size increases.  Big O represents the upper bound Omega the lower bound and Theta represents both upper and lower bounds.", "image_url": "https://i.ytimg.com/vi/XMUe3zFhM5c/maxresdefault.jpg", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_6.webp", "video_url": "https://example.com/image_6.png", "video_path": "data/videos/image_6.webp"}, {"slide_number": "7", "title": "Recurrence Relations", "slide_type": "Image Left", "content": "Equations describing a function in terms of smaller inputs.\nUsed to analyze the time complexity of recursive algorithms.\nSolved using substitution, recurrence tree, or master methods.", "image_desc": "A mathematical equation representing a simple recurrence relation. Type: equation\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "Recurrence relations are equations that define a function in terms of its values on smaller inputs.  They are frequently used to analyze the runtime of recursive algorithms and we have several methods for solving them.", "image_url": "http://image.slidesharecdn.com/recurrencerelations-150305012137-conversion-gate01/95/recurrence-relations-16-638.jpg?cb=1425518740", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_7.webp", "video_url": "https://example.com/image_7.png", "video_path": "data/videos/image_7.webp"}, {"slide_number": "8", "title": "Divide and Conquer", "slide_type": "Image Right", "content": "Divide the problem into smaller subproblems.\nConquer (solve) the subproblems recursively.\nCombine the solutions to solve the original problem.", "image_desc": "A visual representation of the divide and conquer approach, perhaps showing a problem being broken down into smaller parts and then recombined. Type: illustration\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "The divide and conquer strategy is a powerful algorithmic technique. It involves recursively breaking down a problem into smaller subproblems solving them independently and then combining the results.  We'll examine several algorithms that use this approach.", "image_url": "https://static.javatpoint.com/tutorial/daa/images/divide-and-conquer-introduction.png", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_8.webp", "video_url": "https://example.com/image_8.png", "video_path": "data/videos/image_8.webp"}, {"slide_number": "9", "title": "Examples: Binary Search, Merge Sort, Quick Sort, Strassen's Matrix Multiplication", "slide_type": "Table of Contents", "content": "Binary Search\nMerge Sort\nQuick Sort\nStrassen's Matrix Multiplication", "image_desc": "A simple list or table outlining the four algorithms. Type: list\n\n### Video Suggestion:\n(None)", "video_desc": "(None)", "narration": "We will now explore specific examples of algorithms that utilize these concepts including binary search merge sort quick sort and Strassen's matrix multiplication.  These examples will illustrate the principles we've discussed.\n\n\nContinue adding slides in this format for each algorithm Binary Search Merge Sort Quick Sort and Strassen's Matrix Multiplication detailing their steps analysis and complexities.", "image_url": "https://media.licdn.com/dms/image/D5612AQF3U0aklZC_rw/article-cover_image-shrink_720_1280/0/1675792372521?e=2147483647&v=beta&t=LrnyCQO85AKv-AUX3TqOCXBfCec_QrCh4blbWFZYsaU", "image_path": "data/videos/0bdd60c4-7d7d-4c3e-bb8e-d73a91428734/images/image_9.webp", "video_url": "https://example.com/image_9.png", "video_path": "data/videos/image_9.webp"}]