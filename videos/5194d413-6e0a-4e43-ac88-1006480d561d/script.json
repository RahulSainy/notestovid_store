[{"slide_number": "1", "title": "Understanding Regular Expressions in Python", "slide_type": "Title Slide", "content": "(No additional content for Title Slide)", "image_desc": "A stylized image of a Python snake intertwined with a complex pattern representing a regular expression.", "narration": "Welcome! Today, we'll be exploring the powerful world of regular expressions, or regex, within the Python programming language.  Get ready to learn how to use these tools to efficiently search and manipulate text.", "image_url": "https://img.freepik.com/premium-photo/seamless-pattern-python-snake_41969-28137.jpg", "image_path": "data/videos/5194d413-6e0a-4e43-ac88-1006480d561d/images/image_1.webp"}, {"slide_number": "2", "title": "What are Regular Expressions?", "slide_type": "Image Left", "content": "Powerful text processing tools\nSearch for patterns in text\nReplace or extract specific parts of text\nUsed in various applications (data cleaning, web scraping, etc.)", "image_desc": "An image depicting a magnifying glass over a document with highlighted text, symbolizing the search and pattern-matching capabilities of regex.", "narration": "Regular expressions are essentially search patterns. They allow us to find specific sequences of characters within a larger body of text.  Think of them as a supercharged \"find and replace\" function. They're incredibly useful for tasks like data cleaning, web scraping, and much more.", "image_url": "https://thumbs.dreamstime.com/b/vector-illustration-magnifying-glass-over-document-symbolizing-text-review-analysis-magnifying-glass-over-document-318761208.jpg", "image_path": "data/videos/5194d413-6e0a-4e43-ac88-1006480d561d/images/image_2.webp"}, {"slide_number": "3", "title": "Basic Regex Syntax", "slide_type": "Two Columns", "content": "**Column 1: Metacharacters**\n. (matches any character except newline)\n^ (matches the beginning of a string)\n$ (matches the end of a string)\n* (matches zero or more occurrences)\n+ (matches one or more occurrences)\n? (matches zero or one occurrence)\n[] (matches a set of characters)\n**Column 2: Special Sequences**\n\\d (matches any digit)\n\\D (matches any non-digit)\n\\s (matches any whitespace character)\n\\S (matches any non-whitespace character)\n\\w (matches any alphanumeric character)\n\\W (matches any non-alphanumeric character)", "image_desc": "A table summarizing common metacharacters and special sequences used in regular expressions, with clear explanations.", "narration": "Let's look at some fundamental building blocks.  Metacharacters are special symbols that have specific meanings within regex. For example, a dot (.) matches any character, while a star (*) matches zero or more occurrences of the preceding character.  We also have special sequences like \\d for digits and \\w for alphanumeric characters.", "image_url": "https://i.ytimg.com/vi/LAPbDLhG6Kw/maxresdefault.jpg", "image_path": "data/videos/5194d413-6e0a-4e43-ac88-1006480d561d/images/image_3.webp"}, {"slide_number": "4", "title": "Python's 're' Module", "slide_type": "Image Right", "content": "'re.search()' (finds the first match)\n're.findall()' (finds all matches)\n're.sub()' (replaces matches)\n're.compile()' (compiles regex for efficiency)", "image_desc": "A screenshot of Python code demonstrating the use of the 're' module's functions.", "narration": "In Python, the 're' module provides functions to work with regular expressions.  're.search()' finds the first match, 're.findall()' finds all matches, and 're.sub()' allows for replacements.  're.compile()' is useful for optimizing performance when using the same regex multiple times.", "image_url": "https://miro.medium.com/max/1400/1*GeETrSzf8RPKKU4ZCPo0og.png", "image_path": "data/videos/5194d413-6e0a-4e43-ac88-1006480d561d/images/image_4.webp"}, {"slide_number": "5", "title": "Example: Extracting Email Addresses", "slide_type": "Image with Caption", "content": "(No additional content for this slide type)", "image_desc": "A code snippet showing a Python program using regex to extract email addresses from a string, along with the output showing the extracted email addresses.  The regex pattern should be clearly visible.", "narration": "Here's a practical example.  This code uses a regular expression to extract email addresses from a text string.  Notice how the pattern is designed to capture the typical structure of an email address.  This demonstrates the power and flexibility of regex for real-world tasks.", "image_url": "https://therenegadecoder.com/wp-content/uploads/2020/05/python-input-output.png", "image_path": "data/videos/5194d413-6e0a-4e43-ac88-1006480d561d/images/image_5.webp"}, {"slide_number": "6", "title": "Conclusion", "slide_type": "Image Right", "content": "Powerful tool for text manipulation\nLearn more advanced techniques\nPractice makes perfect!", "image_desc": "An image of a person successfully completing a coding challenge, symbolizing mastering regex.", "narration": "Regular expressions are a powerful tool for text processing.  We've covered the basics, but there's much more to explore.  The key is practice \u2013 the more you use regex, the more comfortable and proficient you'll become.  Thank you!", "image_url": "https://learncodingusa.com/wp-content/uploads/2023/10/Mastering-Regex-Practical-Coding-Examples-in-Perl.jpg", "image_path": "data/videos/5194d413-6e0a-4e43-ac88-1006480d561d/images/image_6.webp"}]