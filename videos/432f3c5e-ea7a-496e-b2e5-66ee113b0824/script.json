[{"slide_number": "1", "title": "SOLID Principles", "slide_type": "Title Slide", "content": "No Content", "image_desc": "No Image Description", "video_desc": "software design principles", "narration": "Aaj hum SOLID principles ke baare mein baat karenge. Yeh principles software design ke liye bahut important hain aur inko follow karke hum apne code ko aur bhi behtar bana sakte hain.", "image_urls": ["No Image Found"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_1.webp", "video_urls": ["https://videos.pexels.com/video-files/2887463/2887463-sd_960_540_25fps.mp4"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_1.mp4"}, {"slide_number": "2", "title": "What are SOLID Principles?", "slide_type": "Image Left", "content": "A set of five design principles.\nIntended to make software designs more understandable, flexible, and maintainable.\nIntroduced by Robert C. Martin (Uncle Bob).", "image_desc": "Robert C. Martin (Uncle Bob). Type: portrait", "video_desc": "", "narration": "SOLID principles paanch design principles ka ek set hai jo Robert C. Martin jise Uncle Bob bhi kaha jata hai dwara introduce kiye gaye the. Inka maqsad software designs ko zyada samajhne layak flexible aur maintainable banana hai. Yeh principles humein code ko is tarah se organize karne mein madad karte hain ki woh aasaani se change kiya ja sake aur usme bugs kam ho.", "image_urls": ["https://cleancoders.com/images/portraits/robert-martin.jpg"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_2.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_2.mp4"}, {"slide_number": "3", "title": "The Five SOLID Principles", "slide_type": "Image with Caption", "content": "Single Responsibility Principle (SRP)\nOpen/Closed Principle (OCP)\nLiskov Substitution Principle (LSP)\nInterface Segregation Principle (ISP)\nDependency Inversion Principle (DIP)", "image_desc": "SOLID acronym. Type: text", "video_desc": "", "narration": "SOLID principles mein paanch principles shaamil hain Single Responsibility Principle OpenClosed Principle Liskov Substitution Principle Interface Segregation Principle aur Dependency Inversion Principle. Har ek principle ka apna maqsad hai aur woh software design ke ek specific aspect ko address karta hai. Aage ki slides mein hum in principles ko detail mein dekhenge.", "image_urls": ["https://miro.medium.com/v2/resize:fit:1200/1*6chqoBn4KgYHHKQycdwkyw.png"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_3.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_3.mp4"}, {"slide_number": "4", "title": "Single Responsibility Principle (SRP)", "slide_type": "Image Right", "content": "A class should have only one reason to change.\nFocus on high cohesion.\nAvoid God classes.", "image_desc": "Single responsibility principle diagram. Type: diagram", "video_desc": "", "narration": "Single Responsibility Principle kehta hai ki ek class keval ek hi reason se change honi chahiye. Iska matlab hai ki ek class ko sirf ek hi kaam karna chahiye. Isse high cohesion maintain hoti hai aur God classes se bacha ja sakta hai jo bahut saare alagalag kaam karte hain aur unhe maintain karna mushkil hota hai.", "image_urls": ["https://res.cloudinary.com/practicaldev/image/fetch/s--BchUpsLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://rcardin.github.io/assets/2017-12-26/srp_wrong_design.png"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_4.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_4.mp4"}, {"slide_number": "5", "title": "Open/Closed Principle (OCP)", "slide_type": "Image Right", "content": "Software entities should be open for extension, but closed for modification.\nExtend functionality without modifying existing code.\nUse abstraction and polymorphism.", "image_desc": "Open Closed principle diagram. Type: diagram", "video_desc": "", "narration": "OpenClosed Principle kehta hai ki software entities extension ke liye open hone chahiye lekin modification ke liye closed. Iska matlab hai ki humein existing code ko modify kiye bina functionality ko extend karne ka tareeka dhundhna chahiye. Yeh abstraction aur polymorphism ka use karke kiya ja sakta hai.", "image_urls": ["https://www.cs.sjsu.edu/faculty/pearce/modules/lectures/ood/principles/ocp_files/image001.jpg"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_5.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_5.mp4"}, {"slide_number": "6", "title": "Liskov Substitution Principle (LSP)", "slide_type": "Image Right", "content": "Subtypes must be substitutable for their base types.\nDerived classes should not break the functionality of base classes.\nEnsure proper inheritance.", "image_desc": "Liskov Substitution principle diagram. Type: diagram", "video_desc": "", "narration": "Liskov Substitution Principle kehta hai ki subtypes ko apne base types ke liye substitutable hona chahiye. Iska matlab hai ki derived classes ko base classes ki functionality ko break nahi karna chahiye. Yeh proper inheritance ko ensure karta hai aur code ko zyada reliable banata hai.", "image_urls": ["https://miro.medium.com/v2/resize:fit:1200/1*g3wKb9J4oIel4CRxfiUdQQ.png"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_6.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_6.mp4"}, {"slide_number": "7", "title": "Interface Segregation Principle (ISP)", "slide_type": "Image Right", "content": "Clients should not be forced to depend on methods they do not use.\nCreate smaller, more specific interfaces.\nAvoid fat interfaces.", "image_desc": "Interface Segregation principle diagram. Type: diagram", "video_desc": "", "narration": "Interface Segregation Principle kehta hai ki clients ko un methods par depend karne ke liye force nahi kiya jana chahiye jinhe woh use nahi karte. Iska matlab hai ki humein smaller more specific interfaces create karne chahiye. Yeh fat interfaces se bachata hai jinme bahut saare methods hote hain aur unhe implement karna mushkil hota hai.", "image_urls": ["https://www.c-sharpcorner.com/UploadFile/pranayamr/overview-of-interface-segregation-principle/Images/interface.jpg"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_7.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_7.mp4"}, {"slide_number": "8", "title": "Dependency Inversion Principle (DIP)", "slide_type": "Image Right", "content": "High-level modules should not depend on low-level modules. Both should depend on abstractions.\nAbstractions should not depend on details. Details should depend on abstractions.\nUse dependency injection.", "image_desc": "Dependency Inversion principle diagram. Type: diagram", "video_desc": "", "narration": "Dependency Inversion Principle kehta hai ki highlevel modules ko lowlevel modules par depend nahi karna chahiye. Dono ko abstractions par depend karna chahiye. Abstractions ko details par depend nahi karna chahiye. Details ko abstractions par depend karna chahiye. Yeh dependency injection ka use karke kiya ja sakta hai jo code ko zyada loosely coupled banata hai aur test karna aasaan hota hai.", "image_urls": ["https://miro.medium.com/v2/resize:fit:1400/1*HwcN97TJzOH53jS28ab_dQ.png"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_8.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_8.mp4"}, {"slide_number": "9", "title": "Benefits of SOLID Principles", "slide_type": "Two Columns", "content": "**Improved Code Quality**\nMore maintainable\nMore testable\nMore reusable\n**Reduced Development Costs**\nEasier to understand\nEasier to modify\nFewer bugs", "image_desc": "Code quality improvement. Type: infographic", "video_desc": "", "narration": "SOLID principles ko follow karne se code quality improve hoti hai development costs kam hote hain aur code zyada maintainable testable aur reusable banta hai. Isse code ko samajhna aur modify karna aasaan ho jata hai aur bugs bhi kam hote hain.", "image_urls": ["https://www.shutterstock.com/image-vector/quality-management-documents-rectangle-infographic-260nw-2461118587.jpg"], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_9.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_9.mp4"}, {"slide_number": "10", "title": "Conclusion", "slide_type": "Image with Caption", "content": "SOLID principles are essential for creating robust and maintainable software.", "image_desc": "Software development team. Type: photograph", "video_desc": "", "narration": "Conclusion mein SOLID principles robust aur maintainable software create karne ke liye bahut important hain. In principles ko follow karke hum apne code ko aur bhi behtar bana sakte hain aur software development process ko improve kar sakte hain.", "image_urls": ["https://media.istockphoto.com/id/2114295998/photo/asian-and-indian-developer-devops-team-discussion-about-coding-promgram-with-software.jpg?s=612x612&w=0&k=20&c=LKwTqUnNPgasiwnhKSHfnwxZMxQdD5ziIZRrhGSOlu0="], "image_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/image_10.webp", "video_urls": ["No Video Found"], "video_path": "data/videos/432f3c5e-ea7a-496e-b2e5-66ee113b0824/images/video_10.mp4"}]