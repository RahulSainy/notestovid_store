[{"slide_number": "1", "title": "React Interview Questions For Freshers", "slide_type": "Title Slide", "content": "No Content", "image_desc": "No Image Description", "video_desc": "react tutorial", "narration": "Hello everyone and welcome In this video we'll be covering some common React interview questions that are frequently asked for fresher roles. These questions will help you prepare and increase your chances of landing that frontend development job.", "image_url": "", "image_path": "", "video_url": "https://videos.pexels.com/video-files/2147141/2147141-sd_960_540_24fps.mp4", "video_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/video_1.mp4"}, {"slide_number": "2", "title": "Table of Contents", "slide_type": "Table of Contents", "content": "What is ReactJS?\nExplain the MVC architecture.\nExplain the building blocks of React.\nExplain props and state in React with differences.\nWhat is virtual DOM in React?\nWhat is JSX?\nWhat are components and their type in React?\nHow do browsers read JSX?\nExplain the steps to create a react application and print Hello World?\nHow to create an event in React?", "image_desc": "React logo. Type: icon", "video_desc": "", "narration": "Here's a quick overview of the topics we'll be discussing today. We'll start with the basics like What is ReactJS and then move on to more detailed explanations of concepts such as MVC architecture React components JSX props state and the virtual DOM. We'll also cover practical aspects like creating a React application and handling events.", "image_url": "https://images.tpointtech.com/tutorial/reactjs/images/react-icons.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_3.webp", "video_url": "", "video_path": ""}, {"slide_number": "3", "title": "What is ReactJS?", "slide_type": "Image Left", "content": "A JavaScript library for building user interfaces.\nUsed for building reusable UI components.\nPopular for Single Page Applications (SPAs).\nWritten in JSX.", "image_desc": "React logo. Type: icon", "video_desc": "", "narration": "ReactJS is a powerful JavaScript library designed to build interactive user interfaces. It allows developers to create reusable UI components making it ideal for building complex applications. React is particularly wellsuited for Single Page Applications or SPAs and it uses JSX a syntax extension of JavaScript.", "image_url": "https://images.tpointtech.com/tutorial/reactjs/images/react-icons.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_3.webp", "video_url": "", "video_path": ""}, {"slide_number": "4", "title": "Important Features of React", "slide_type": "Image Right", "content": "Virtual DOM: Efficient updates and rendering.\nComponent-Based Architecture: Modular and maintainable code.\nHooks: State and side effect management in functional components.\nServer-Side Rendering (SSR): Improves performance and SEO.\nReact Router: Enables navigation in SPAs.", "image_desc": "React features. Type: infographic", "video_desc": "", "narration": "React comes with several key features. The Virtual DOM enables efficient updates minimizing direct DOM manipulations. Its componentbased architecture promotes modularity and maintainability. React Hooks allow functional components to manage state and side effects. ServerSide Rendering enhances performance and SEO and React Router facilitates navigation in singlepage applications.", "image_url": "https://public-files.gumroad.com/nhfjr2p7sw08jwz679vh0tbbauwz", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_4.webp", "video_url": "", "video_path": ""}, {"slide_number": "5", "title": "Explain the MVC Architecture", "slide_type": "Table of Contents", "content": "Model: Manages data and business logic.\nView: Displays data to the user.\nController: Handles user input and updates the model.\nSeparates business logic, data, and presentation.", "image_desc": "MVC architecture diagram. Type: diagram", "video_desc": "", "narration": "The ModelViewController or MVC architecture is a design pattern that separates an application into three interconnected parts. The Model manages data and business logic the View displays the data to the user and the Controller handles user input and updates the Model. This separation helps in organizing and maintaining complex applications.", "image_url": "https://i.sstatic.net/BkzmI.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_5.webp", "video_url": "", "video_path": ""}, {"slide_number": "6", "title": "Building Blocks of React", "slide_type": "Image Right", "content": "Components: Reusable UI elements.\nJSX: HTML-like syntax in JavaScript.\nProps and State: Data management.\nContext: Passing data through the component tree.\nVirtual DOM: Efficient UI updates.", "image_desc": "React building blocks. Type: infographic", "video_desc": "", "narration": "React has five main building blocks. Components are reusable pieces of code that define UI elements. JSX is a syntax extension that allows you to write HTMLlike structures within JavaScript. Props and State are used for managing data within components. Context provides a way to pass data through the component tree without manually passing props at every level and the Virtual DOM ensures efficient UI updates.", "image_url": "https://www.shutterstock.com/image-vector/infographic-template-icons-5-options-600nw-2424466009.jpg", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_6.webp", "video_url": "", "video_path": ""}, {"slide_number": "7", "title": "Props vs. State in React", "slide_type": "Two Columns", "content": "**PROPS**\nData passed from one component to another.\nImmutable (read-only).\nCan be used with functional and class components.\n**STATE**\nData managed within the component.\nMutable (can be modified).\nPrimarily used with class components (before Hooks).", "image_desc": "Props vs state. Type: comparison chart", "video_desc": "", "narration": "Props and State are both essential for managing data in React but they serve different purposes. Props are used to pass data from a parent component to a child component and they are immutable meaning they cannot be changed by the child component. State on the other hand is managed within a component and can be modified allowing components to update their own data and trigger rerenders.", "image_url": "https://miro.medium.com/v2/resize:fit:2000/0*wGaUQvXc4HymloHn.jpg", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_7.webp", "video_url": "", "video_path": ""}, {"slide_number": "8", "title": "Props in Detail", "slide_type": "Image Left", "content": "Used to pass data to child components.\nRead-only from the child component's perspective.\nEnables component reusability with different data.", "image_desc": "Props example. Type: code snippet", "video_desc": "", "narration": "Props are like function arguments for React components. They allow you to pass data from a parent component to a child component making the child component more dynamic and reusable. From the child component's perspective props are readonly ensuring that the parent component maintains control over the data.", "image_url": "https://miro.medium.com/v2/resize:fit:643/1*QlJXO_tI7h_qB4LKk8mAOA.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_8.webp", "video_url": "", "video_path": ""}, {"slide_number": "9", "title": "State in Detail", "slide_type": "Image Right", "content": "Manages local data within a component.\nCan be modified using 'setState'.\nTriggers re-rendering when updated.", "image_desc": "State example. Type: code snippet", "video_desc": "", "narration": "State is used to manage data that changes within a component. Unlike props state can be modified using the 'setState' method. When the state is updated React automatically rerenders the component to reflect the changes in the UI.", "image_url": "https://i.sstatic.net/zsPKW.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_9.webp", "video_url": "", "video_path": ""}, {"slide_number": "10", "title": "What is Virtual DOM in React?", "slide_type": "Image Left", "content": "In-memory representation of the actual DOM.\nEnables efficient updates and rendering.\nUses a diffing algorithm to minimize DOM manipulations.", "image_desc": "Virtual DOM diagram. Type: diagram", "video_desc": "", "narration": "The Virtual DOM is an inmemory representation of the actual DOM or Document Object Model. React uses the Virtual DOM to efficiently update and render the user interface. By comparing the current and previous states of the Virtual DOM React's diffing algorithm identifies the minimal set of changes needed to update the real DOM resulting in faster and more efficient rendering.", "image_url": "https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fux2o2yg5lfrvwut60spp.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_10.webp", "video_url": "", "video_path": ""}, {"slide_number": "11", "title": "How Virtual DOM Works - Efficient Rendering", "slide_type": "Image Right", "content": "Virtual DOM is an in-memory representation.\nOptimizes UI updates.", "image_desc": "Virtual DOM process. Type: flowchart", "video_desc": "", "narration": "The Virtual DOM acts as a lightweight copy of the actual DOM allowing React to perform updates in memory first. This process significantly optimizes UI updates because inmemory operations are much faster than directly manipulating the real DOM.", "image_url": "https://media2.dev.to/dynamic/image/width=1280,height=720,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fx8katugqbphwou3vxz1x.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_11.webp", "video_url": "", "video_path": ""}, {"slide_number": "12", "title": "How Virtual DOM Works - Diffing Algorithm", "slide_type": "Image Left", "content": "Compares current and previous Virtual DOM versions.\nIdentifies minimal changes required.", "image_desc": "Diffing algorithm visualization. Type: diagram", "video_desc": "", "narration": "React's diffing algorithm is the key to its efficient rendering. It compares the current and previous versions of the Virtual DOM to identify the smallest set of changes needed to update the actual DOM. This minimizes the number of operations performed on the real DOM which is a relatively slow process.", "image_url": "https://media.springernature.com/m685/springer-static/image/art%3A10.1038%2Fs41467-018-05988-7/MediaObjects/41467_2018_5988_Fig1_HTML.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_12.webp", "video_url": "", "video_path": ""}, {"slide_number": "13", "title": "How Virtual DOM Works - Batch Updates", "slide_type": "Image Right", "content": "Batches multiple changes.\nReduces unnecessary re-renders.", "image_desc": "Batch updates illustration. Type: diagram", "video_desc": "", "narration": "Instead of updating the real DOM with each individual change React batches multiple updates together. This reduces the number of rerenders further improving performance and providing a smoother user experience.", "image_url": "https://www.slideteam.net/media/catalog/product/cache/1280x720/p/r/process_flow_diagram_of_batch_processing_system_slide01.jpg", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_13.webp", "video_url": "", "video_path": ""}, {"slide_number": "14", "title": "How Virtual DOM Works - Faster Updates", "slide_type": "Image Left", "content": "Minimizes direct DOM manipulations.\nOnly updates where necessary.", "image_desc": "DOM manipulation comparison. Type: diagram", "video_desc": "", "narration": "Since direct DOM manipulations are slow React minimizes them by only making updates where necessary. After comparing the Virtual DOM React knows exactly which parts of the actual DOM need to be changed leading to faster and more efficient updates.", "image_url": "https://miro.medium.com/v2/resize:fit:560/0*doE0aGh2lPSq9xeu.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_14.webp", "video_url": "", "video_path": ""}, {"slide_number": "15", "title": "How Virtual DOM Works - Declarative UI", "slide_type": "Image Right", "content": "Allows developers to write declarative code.\nReact handles UI updates efficiently.", "image_desc": "Declarative UI example. Type: code snippet", "video_desc": "", "narration": "With the Virtual DOM developers can write code in a declarative style focusing on what the UI should look like rather than how to update it. React takes care of the underlying DOM manipulations ensuring that the UI is updated efficiently and automatically.", "image_url": "http://blogs.sw.siemens.com/wp-content/uploads/sites/14/2019/09/Declarative-UI_10-1.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_15.webp", "video_url": "", "video_path": ""}, {"slide_number": "16", "title": "What is JSX?", "slide_type": "Table of Contents", "content": "Syntax extension of JavaScript.\nUsed to create React elements.\nAllows writing HTML-like code in JavaScript.\nExpressions are wrapped in curly braces {}.", "image_desc": "JSX example. Type: code snippet", "video_desc": "", "narration": "JSX is a syntax extension of JavaScript that allows you to write HTMLlike code within your JavaScript files. It makes it easier to create React elements and define the structure of your UI. To embed JavaScript expressions in JSX you wrap them in curly braces.", "image_url": "https://i.sstatic.net/78Q2h.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_16.webp", "video_url": "", "video_path": ""}, {"slide_number": "17", "title": "Components in React", "slide_type": "Image Right", "content": "Core building blocks of React applications.\nReusable and independent pieces of code.\nMake UI development easier and more organized.", "image_desc": "React components structure. Type: diagram", "video_desc": "", "narration": "Components are the core building blocks of React applications. They are reusable and independent pieces of code that define parts of the user interface. By breaking down the UI into components you can make your code more modular maintainable and easier to understand.", "image_url": "https://blog.risingstack.com/wp-content/uploads/2021/07/react_component_hierarchy.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_17.webp", "video_url": "", "video_path": ""}, {"slide_number": "18", "title": "Types of Components", "slide_type": "Image Left", "content": "Functional Components: Simple JavaScript functions.\nClass Components: More complex, can manage state and lifecycle methods.", "image_desc": "Functional vs Class components. Type: comparison chart", "video_desc": "", "narration": "There are mainly two types of components in React functional components and class components. Functional components are simple JavaScript functions that return JSX. Class components are more complex and can manage their own state and lifecycle methods. With the introduction of Hooks functional components can now also manage state and side effects making them more powerful and versatile.", "image_url": "https://artoonsolutions.com/wp-content/uploads/2024/04/Blog-Banner-scaled.webp", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_18.webp", "video_url": "", "video_path": ""}, {"slide_number": "19", "title": "How do Browsers Read JSX?", "slide_type": "Image Right", "content": "Browsers cannot read JSX directly.\nJSX needs to be transpiled into JavaScript.\nBabel is a common transpiler used for React.", "image_desc": "JSX transpilation process. Type: diagram", "video_desc": "", "narration": "Web browsers cannot directly read JSX code. JSX needs to be transpiled into standard JavaScript that browsers can understand. Babel is a popular transpiler that is commonly used with React to convert JSX code into JavaScript.", "image_url": "https://cdn-media-1.freecodecamp.org/images/1*ighKXxBnnSdDlaOr5-ZOPg.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_19.webp", "video_url": "", "video_path": ""}, {"slide_number": "20", "title": "Creating a React Application", "slide_type": "Image Left", "content": "Ensure Node.js is installed.\nUse 'npx create-react-app <Application_Name>'.\nNavigate to the application folder: 'cd <Application_Name>'.\nStart the development server: 'npm start'.", "image_desc": "create-react-app command. Type: terminal screenshot", "video_desc": "", "narration": "To create a new React application you first need to make sure that Node.js is installed on your computer. Then you can use the 'npx createreactapp' command followed by the name of your application. After the application is created navigate to the application folder using the 'cd' command and start the development server with 'npm start'.", "image_url": "https://media.geeksforgeeks.org/wp-content/uploads/20240910130222/Screenshot-2024-09-10-111509.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_20.webp", "video_url": "", "video_path": ""}, {"slide_number": "21", "title": "\"Hello World\" in React", "slide_type": "Image Right", "content": "import React from \"react\";\nimport \"./App.css\";\nfunction App() {\nreturn Hello World !;\n}\nexport default App;", "image_desc": "Hello world code. Type: code snippet", "video_desc": "", "narration": "Here's the code for a simple Hello World application in React. You import React define a functional component called 'App' that returns a 'div' containing the text Hello World and then export the component. This is the basic structure of a React component.", "image_url": "https://d8it4huxumps7.cloudfront.net/uploads/images/65e17cdfa90ea_hello_world_program_in_python_1000_x_400_px_4.jpg?d=2000x2000", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_21.webp", "video_url": "", "video_path": ""}, {"slide_number": "22", "title": "Running the Application", "slide_type": "Image Left", "content": "Type 'npm start' in the terminal.\nThe application will open in your browser.", "image_desc": "React app screenshot. Type: browser screenshot", "video_desc": "", "narration": "To run your React application type 'npm start' in the terminal. This will start the development server and open the application in your default web browser. You should see the Hello World message displayed on the screen.", "image_url": "https://www.w3schools.com/react/screenshot_myfirstreact.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_22.webp", "video_url": "", "video_path": ""}, {"slide_number": "23", "title": "Creating Events in React", "slide_type": "Image Right", "content": "Attach event handlers like 'onClick', 'onChange', etc. to JSX elements.\nDefine handler functions to specify actions.\nUse 'e.preventDefault()' to prevent default browser behavior.", "image_desc": "React event example. Type: code snippet", "video_desc": "", "narration": "To create an event in React you attach an event handler such as 'onClick' or 'onChange' to a JSX element. You then define a handler function that specifies the action to be performed when the event is triggered. The 'e.preventDefault' method can be used to prevent the default browser behavior such as submitting a form.", "image_url": "https://devtrium.com/react-typescript-events/react-event-types.png", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_23.webp", "video_url": "", "video_path": ""}, {"slide_number": "24", "title": "Example of Event Handling", "slide_type": "Image Left", "content": "function Component() {\ndoSomething(e);\n{\ne.preventDefault();\n// Some more response to the event\n}\nreturn ;\n}", "image_desc": "Event handling code. Type: code snippet", "video_desc": "", "narration": "Here's an example of how to handle an event in React. You define a function called 'doSomething' that takes an event object as an argument. Inside the function you can prevent the default browser behavior using 'e.preventDefault' and perform other actions in response to the event. Finally you attach the 'doSomething' function to the 'onClick' event of a button element.", "image_url": "https://community.gamedev.tv/uploads/db2322/original/3X/7/0/705cd73cc1a05ed9c06c807b8b94fd0a14c1e7cb.jpeg", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_24.webp", "video_url": "", "video_path": ""}, {"slide_number": "25", "title": "Conclusion", "slide_type": "Title Slide", "content": "No Content", "image_desc": "No Image Description", "video_desc": "", "narration": "That concludes our overview of common React interview questions for freshers. By understanding these concepts and practicing your coding skills you'll be wellprepared to ace your React interviews and start your career as a frontend developer. Good luck", "image_url": "https://www.shutterstock.com/image-vector/no-profile-pictures-needed-describe-600w-1439312147.jpg", "image_path": "data/videos/04129191-4fee-41ca-bbd2-0da4389764c7/images/image_25.webp", "video_url": "", "video_path": ""}]